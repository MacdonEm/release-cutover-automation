apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cut-new-pipeline
  namespace: cicd
spec:
  params:
    - name: acm-branch
      type: string
      value: 2.8
      description: Existing pipeline branch to cut from
    - name: acm-new
      type: string
      value: 2.9
      description: New pipeline branch to cut
    - name: mce-branch
      type: string
      value: 2.3
      description: Existing backplane-pipeline to cut from
    - name: mce-new
      type: string
      value: 2.4
      description: New backplane-pipeline branch to cut
  stepTemplate:
    volumeMounts:
      - mountPath: /step-strage
        name: step-storage
  steps:
    - name: cut-new-acm
      image: 'quay.io/gurnben/tekton-runner:latest'
      env:
        - name: 1
          value: "pipeline"
        - name: 2
          value: $(params.acm-branch)
        - name: 3
          value: $(params.acm-new)
      script: |
        # $1 - repo (pipeline vs. backplane-pipeline)
        # $2 - existing branch x.y
        # $3 - to-be branch x.y

        # For debugging purposes:
        # 1) copy about "script" into a bash script
        # 2) add #!/bin/sh to the top
        # 3) uncomment helper if statements
        # 4) run script as normal with desired inputs

        TMPPLACE=newpipe-tmp

        # if [ -z "$1" -o -z "$2" -o -z "$3" ]; then echo "I need three parameters: repo (pipeline or backplane-pipeline), old branch x.y number, new branch x.y number."; exit 1;
        # fi

        # if [ -d "$TMPPLACE" ]; then echo "The directory $TMPPLACE exists.  Remove it in order to continue."; exit 1;
        # fi

        setup() {
          # $1 - pipeline/backplane-pipeline repo
          mkdir $TMPPLACE
          cd $TMPPLACE
          git clone git@github.com:stolostron/$1 $TMPPLACE
          cd $TMPPLACE
        }

        teardown() {
          cd ../..
        }

        operate() {
          # $1 - existing branch x.y
          # $2 - to-be branch x.y
          # $3 - branch suffix
          git checkout $1-$3
          git pull
          git checkout -b $2-$3
          rm snapshots/*
          touch snapshots/.gitkeep
          git commit -am "Clean out snapshots for new branch"
          git push --set-upstream origin $2-$3
        }

        setup $1
        operate $2 $3 integration
        operate $2 $3 dev
        operate $2 $3 nightly
        operate $2 $3 preview
        if [ "$1" = "pipeline" ]; then
          operate $2 $3 edge
          operate $2 $3 stable
        fi
        teardown
    - name: cut-new-mce
      image: 'quay.io/gurnben/tekton-runner:latest'
      env:
        - name: 1
          value: "backplane-pipeline"
        - name: 2
          value: $(params.acm-branch)
        - name: 3
          value: $(params.acm-new)
      script: |
        # $1 - repo (pipeline vs. backplane-pipeline)
        # $2 - existing branch x.y
        # $3 - to-be branch x.y

        # For debugging purposes:
        # 1) copy about "script" into a bash script
        # 2) add #!/bin/sh to the top
        # 3) uncomment helper if statements
        # 4) run script as normal with desired inputs

        TMPPLACE=newpipe-tmp

        # if [ -z "$1" -o -z "$2" -o -z "$3" ]; then echo "I need three parameters: repo (pipeline or backplane-pipeline), old branch x.y number, new branch x.y number."; exit 1;
        # fi

        # if [ -d "$TMPPLACE" ]; then echo "The directory $TMPPLACE exists.  Remove it in order to continue."; exit 1;
        # fi

        setup() {
          # $1 - pipeline/backplane-pipeline repo
          mkdir $TMPPLACE
          cd $TMPPLACE
          git clone git@github.com:stolostron/$1 $TMPPLACE
          cd $TMPPLACE
        }

        teardown() {
          cd ../..
        }

        operate() {
          # $1 - existing branch x.y
          # $2 - to-be branch x.y
          # $3 - branch suffix
          git checkout $1-$3
          git pull
          git checkout -b $2-$3
          rm snapshots/*
          touch snapshots/.gitkeep
          git commit -am "Clean out snapshots for new branch"
          git push --set-upstream origin $2-$3
        }

        setup $1
        operate $2 $3 integration
        operate $2 $3 dev
        operate $2 $3 nightly
        operate $2 $3 preview
        if [ "$1" = "pipeline" ]; then
          operate $2 $3 edge
          operate $2 $3 stable
        fi
        teardown
